{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspace\\\\InterBank\\\\InterBank_Front\\\\src\\\\context\\\\AuthContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport { signIn, signUp, me } from '../services/resources/user';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext({});\nexport const AuthProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [user, setUser] = useState(() => {\n    const user = localStorage.getItem('@Inter:User');\n\n    if (user) {\n      return JSON.parse(user);\n    }\n\n    return {};\n  });\n\n  const userSignIn = async userData => {\n    const {\n      data\n    } = await signIn(userData);\n\n    if ((data === null || data === void 0 ? void 0 : data.status) === 'error') {\n      return data;\n    }\n\n    if (data.accessToken) {\n      localStorage.setItem('@Inter:Token', data.accessToken);\n    }\n\n    return await getCurrentUser();\n  };\n\n  const userSignUp = async userData => {\n    const {\n      data\n    } = await signUp(userData);\n\n    if (data.accessToken) {\n      localStorage.setItem('@Inter:Token', data.accessToken);\n    }\n\n    return await getCurrentUser();\n  };\n\n  const getCurrentUser = async () => {\n    const {\n      data\n    } = await me();\n    setUser(data);\n    return data;\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      userSignIn,\n      userSignUp,\n      getCurrentUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AuthProvider, \"m1ajX9Iy3VXclYUtel0njOEB1mA=\");\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["C:/workspace/InterBank/InterBank_Front/src/context/AuthContext.tsx"],"names":["createContext","useState","signIn","signUp","me","AuthContext","AuthProvider","children","user","setUser","localStorage","getItem","JSON","parse","userSignIn","userData","data","status","accessToken","setItem","getCurrentUser","userSignUp"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,SAASC,MAAT,EAAiBC,MAAjB,EAAiDC,EAAjD,QAA2D,4BAA3D;;AAmBA,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CAAc,EAAd,CAAjC;AAEP,OAAO,MAAMM,YAAsB,GAAG,QAAgB;AAAA;;AAAA,MAAf;AAACC,IAAAA;AAAD,GAAe;AAElD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAU,MAAM;AAC5C,UAAMO,IAAI,GAAGE,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAb;;AAEA,QAAGH,IAAH,EAAS;AACL,aAAOI,IAAI,CAACC,KAAL,CAAWL,IAAX,CAAP;AACH;;AAED,WAAO,EAAP;AACH,GAR+B,CAAhC;;AAUA,QAAMM,UAAU,GAAG,MAAOC,QAAP,IAAgC;AAC/C,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMd,MAAM,CAACa,QAAD,CAA3B;;AAEA,QAAG,CAAAC,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEC,MAAN,MAAiB,OAApB,EAA6B;AACzB,aAAOD,IAAP;AACH;;AAED,QAAGA,IAAI,CAACE,WAAR,EAAqB;AACjBR,MAAAA,YAAY,CAACS,OAAb,CAAqB,cAArB,EAAqCH,IAAI,CAACE,WAA1C;AACH;;AAED,WAAO,MAAME,cAAc,EAA3B;AACH,GAZD;;AAcA,QAAMC,UAAU,GAAG,MAAON,QAAP,IAAgC;AAC/C,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMb,MAAM,CAACY,QAAD,CAA3B;;AAEA,QAAGC,IAAI,CAACE,WAAR,EAAoB;AAChBR,MAAAA,YAAY,CAACS,OAAb,CAAqB,cAArB,EAAqCH,IAAI,CAACE,WAA1C;AACH;;AAED,WAAO,MAAME,cAAc,EAA3B;AACH,GARD;;AAUA,QAAMA,cAAc,GAAG,YAAY;AAC/B,UAAM;AAACJ,MAAAA;AAAD,QAAS,MAAMZ,EAAE,EAAvB;AACAK,IAAAA,OAAO,CAACO,IAAD,CAAP;AACA,WAAOA,IAAP;AACH,GAJD;;AAMA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAACR,MAAAA,IAAD;AAAOM,MAAAA,UAAP;AAAmBO,MAAAA,UAAnB;AAA+BD,MAAAA;AAA/B,KAA7B;AAAA,cACKb;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA/CM;;GAAMD,Y;;KAAAA,Y","sourcesContent":["import { createContext, useState } from 'react';\r\nimport { signIn, signUp, SignInData, SignUpData, me } from '../services/resources/user';\r\n\r\ninterface UserDto {\r\n    id: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    accountNumber: number;\r\n    accountDigit: number;\r\n    wallet: number;\r\n    email: string;\r\n}\r\n\r\ninterface ContextData {\r\n    user: UserDto;\r\n    userSignIn: (userData: SignInData) => Promise<UserDto>;\r\n    userSignUp: (userData: SignUpData) => Promise<UserDto>;\r\n    getCurrentUser: () => Promise<UserDto>;\r\n}\r\n\r\nexport const AuthContext = createContext<ContextData>({} as ContextData)\r\n\r\nexport const AuthProvider: React.FC = ({children}) => {\r\n\r\n    const [user, setUser] = useState<UserDto>(() => {\r\n        const user = localStorage.getItem('@Inter:User');\r\n\r\n        if(user) {\r\n            return JSON.parse(user);\r\n        }\r\n\r\n        return {} as UserDto\r\n    });\r\n\r\n    const userSignIn = async (userData: SignInData) => {\r\n        const {data} = await signIn(userData);\r\n\r\n        if(data?.status === 'error') {\r\n            return data;\r\n        }\r\n\r\n        if(data.accessToken) {\r\n            localStorage.setItem('@Inter:Token', data.accessToken);  \r\n        }\r\n\r\n        return await getCurrentUser();\r\n    }\r\n\r\n    const userSignUp = async (userData: SignUpData) => {\r\n        const {data} = await signUp(userData);\r\n\r\n        if(data.accessToken){\r\n            localStorage.setItem('@Inter:Token', data.accessToken);\r\n        }\r\n\r\n        return await getCurrentUser();\r\n    }\r\n\r\n    const getCurrentUser = async () => {\r\n        const {data} = await me();\r\n        setUser(data)\r\n        return data;\r\n    }\r\n\r\n    return(\r\n        <AuthContext.Provider value={{user, userSignIn, userSignUp, getCurrentUser}}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    )\r\n} "]},"metadata":{},"sourceType":"module"}